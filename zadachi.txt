Первым делом необходимо скачать репозиторий и запустить .sln в Visual Studio. Нужно чтобы всё строилось и программы запускались.
Если в списке нет ничего интересного, можно предложить что-то своё.

На счёт благодарности. Она зависит от важности задачи и от сложности реализации. Например, нужно сделать POPUP окно чтобы я смог по полной сделать демо программу со всеми параметрами, крутилками и т.д. Без popup не сделать например раскрывающийся список. Задача важна, не очень сложная, там надо просто разобраться как работает GUI. Если она сделана но не на удовлетворительном уровне (глючит, не работает) то её надо доделать.
Если простая и не очень важная задача ОБЪЁМНА, то она разделяется на несколько.
Какие-то задачи очень просты типа сохранение картинки в файл, туда добавляется сразу несколько вещей которых надо сделать.
Прежде чем что-то делать надо дать мне знать чтобы я пометил что задачу кто-то взялся делать.

Вознаграждения начиная от 500.
Я прекрасно понимаю сколько нужно тратить сил на реализацию вещей. Всё можно делать без напряга, например в перерывах между эпизодами сериала (или во время). Максимально без напряга, быстро делать не надо, я всё равно одновременно несколько задач не приму.
За вещи которые потребуют этот напряг, даю 2000 и более.
Ищу добросовестных людей.

Я со всем помогу, объясню, сделаю пример в demo для удобства.

Вещи которые нужно знать будут здесь
https://github.com/badcoiq/badcoiq/blob/master/coding.txt

Связь
https://t.me/badcoiq
https://gamedev.ru/users/?id=42958
https://badcoiq.ucoz.net/forum/

Задачи.
Пока не все. 


0. Ваша идея.
3. IMAGE. Слияние двух картинок в одну - https://github.com/badcoiq/badcoiq/issues/3
	Работаем только с r8g8b8a
	Сливать надо указанные компоненты цвета - R G B A
	Добавить это внутрь класса bqImage
	
	enum
	{
		merge_RGBA, // R в R, G в G, B в B, A в A
		merge_XXXR, // R в A
	};
	
	То что указывается справа от символа подчёркивания: 4 символа указывают компоненты текущей картинки.
	1й означает Red
	2й Green
	3й Blue
	4й Alpha

	Символы RGBA указывают на компоненты из другой картинки, которая сливается в текущую.
	Эти символы могут указываться в любом порядке.
	merge_RGBA означает что красный компонент будет копирован в красный. далее зелёныфй в зелёный и т.д. 
	merge_GBRA здесь зелёный компонент идёт в красный, синий в зелёный, красный в синий
	Символ X означает что ничего копировать в указанный компонент не нужно
	merge_XXXR RGB компоненты текущей картинки не трогаем. Копируем Red в Alpha.
	
	Функция Merge() принимает другую картинку, которую надо слить с текущей.
	Если эта другая картинка иного размера, то изменяем размер чтобы совпало с текущей.
	Далее сливаем.
		
	img->Merge(otherImage, merge_XXXR);
	
4. MODEL. Создать класс для загрузки моделей - https://github.com/badcoiq/badcoiq/issues/4
	Короче надо проработать файл модели и класс который будет всё сам загружать.
5. Добавить класс контейнер для текстур - https://github.com/badcoiq/badcoiq/issues/5
6. IMAGE. Генератор картинок - https://github.com/badcoiq/badcoiq/issues/6
7. MODEL. Генерация текстурных координат для цилиндра - https://github.com/badcoiq/badcoiq/issues/7
8. MODEL. Генерация других 3D примитивов - https://github.com/badcoiq/badcoiq/issues/8
9. MODEL. Генерация 3D объекта на основе сплайна - https://github.com/badcoiq/badcoiq/issues/9
	Типа модификатор Lathe в 3Ds Max. Линия - набор точек.
10. SOUND. Добавление звука - https://github.com/badcoiq/badcoiq/issues/10
11. SOUND. Сделать интерполяцию при увеличении samplerate.
12. ВЗЯТО (19 мая) IMAGE. Сохранение картинки в файл. 2 типа файла. 24бит .BMP, RGBA8 .DDS. Есть метод в bqImage
	enum class SaveFileFormat
	{
#ifdef BQ_WITH_IMAGE_BMP
		bmp24,
#endif
		ddsRGBA8,
		null
	};
	bool SaveToFile(SaveFileFormat format, const char* path);
	
	Задача лёгкая. Нужно лишь правильно сохранять заголовки, и у BMP делать выравнивание.
	Выравнивание 24бит BMP означает что на каждую линию отводятся столько байт, что деление на 4 даст 0.
	Картинка 3 на 3 будет иметь такой вид
	FF FF FF FF FF FF FF FF FF 00 00 00
	FF FF FF FF FF FF FF FF FF 00 00 00 
	FF FF FF FF FF FF FF FF FF 00 00 00
	
	ddsRGBA это просто обычный массив картинки как есть. bqImage по умолчанию имеет формат r8g8b8a8. Остаётся записать в файл DDS заголовок и массив.
	Возможно что перед сохранением в файл нужно сделать проверку на формат, и сохранять только если формат картинки r8g8b8 или r8g8b8a8.
	
	Реализация метода для BMP (SaveBMP) находится в файле badcoiq.imageloader.BMP.cpp
	DDS (SaveDDS) в файле badcoiq.imageloader.DDS.cpp
	
13. IMAGE. Аналогично с пунктом 12, сохранить в PNG, JPEG, TGA, не забыв добавить новые поля в bqImageFileFormat
		для PNG и JPEG есть библиотеки, там должны быть способы записи в файл. Надо изучать их документацию.
		для TGA нужно делать самому. Можно найти реализацию записи в интернете. Нужна версия с сжатием данных, и чтобы лицензия MIT или BSD или подобная.
14. IMAGE. Добавить загрузчик какого нибудь ещё формата картинок. С записью в файл если возможно.
15. GUI. Работающий Popup
16. IMAGE. Загрузка DDS dxt1 dxt3 dxt5 (конвертирование в r8g8b8a8).
17. MODEL. Надо сделать так чтобы у 3д модели играло сразу 2 или более анимации. Чтобы можно было сделать например человечка который бежит и одновременно стреляет.
18. IMAGE. SetPixel для картинки. Для формата r8g8b8a8
		img->SetPixel(координата x, координата y, цвет)